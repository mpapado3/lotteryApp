/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainApp;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.TransferHandler;
import javax.swing.table.TableModel;

/**
 *
 * @author michael_papado
 */
public class mainForm extends javax.swing.JFrame {
    
    int giftNo;
    List result = new ArrayList();
    
    
    /**
     * Creates new form mainForm
     */
    public mainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        gifts = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lotteryFromNoText = new javax.swing.JTextField();
        lotteryToNoText = new javax.swing.JTextField();
        instertBtn = new javax.swing.JButton();
        runLottery = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Λοτταρία Αριθμών");

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Αριθμός Δώρου", "Λαχνός"
            }
        ));
        jScrollPane1.setViewportView(resultTable);

        jLabel1.setText("Αριθμός Δώρων");

        gifts.setColumns(7);

        jLabel2.setText("Εύρος Αριθμών");

        lotteryFromNoText.setColumns(7);

        lotteryToNoText.setColumns(7);

        instertBtn.setText("Εισαγωγή");
        instertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instertBtnActionPerformed(evt);
            }
        });

        runLottery.setText("Κλήρωση");
        runLottery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runLotteryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runLottery, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gifts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lotteryFromNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lotteryToNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(instertBtn)))))
                .addContainerGap(332, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(gifts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lotteryFromNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lotteryToNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instertBtn))
                .addGap(18, 18, 18)
                .addComponent(runLottery, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void instertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instertBtnActionPerformed
        // TODO add your handling code here:
        if (!lotteryFromNoText.getText().isEmpty()) {
            int from = textToInt(lotteryFromNoText);
            if (!lotteryToNoText.getText().isEmpty()) {
                int to = textToInt(lotteryToNoText);
                for (int i = from;i<=to;i++) {
                    result.add(i);
                }
            } else {
                result.add(from);
            }
        }
        lotteryFromNoText.setText("");
        lotteryToNoText.setText("");
    }//GEN-LAST:event_instertBtnActionPerformed

    private void runLotteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runLotteryActionPerformed
        // TODO add your handling code here:
        giftNo = textToInt(gifts);
        List selectedNo = new ArrayList();
        int min = (int)Collections.min(result);
        int max = (int)Collections.max(result);
        int i = 0;
        while (i<giftNo) {
            int randomNum = ThreadLocalRandom.current().nextInt(min, max+1);
            if (result.contains(randomNum)) {
                if (!selectedNo.contains(randomNum)) {
                selectedNo.add(randomNum);
                System.out.println("Gift No: "+(i+1)+" lottery No: "+randomNum);
                i++;
                }  
            }
        
        }
        TableModel lotteryTableModel = createTable(selectedNo);
        resultTable.setModel(lotteryTableModel);

        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        cb.setContents(new TableTransferable(lotteryTableModel), new ClipboardOwner() {
            @Override
            public void lostOwnership(Clipboard clipboard, Transferable contents) {
                System.out.println("Clipboard lost!");
            }
        });
        
        JOptionPane.showMessageDialog(null, "Η Λίστα έχει αντιγραφεί στο πρόχειρο (clipboard)!"); //This is a popup window
        
    }//GEN-LAST:event_runLotteryActionPerformed

     public static class TableTransferable implements Transferable {

        public static final DataFlavor TABLE_DATA_FLAVOR = new DataFlavor(TableModel.class, "binary/x-java-tablemodel; class=<javax.swing.TableModel>");
        public static final DataFlavor HTML_DATA_FLAVOR = new DataFlavor("text/html", "HTML");
        public static final DataFlavor CSV_DATA_FLAVOR = new DataFlavor("text/csv", "CVS");
        public static final DataFlavor PLAIN_DATA_FLAVOR = new DataFlavor("text/plain", "Plain text");
        public static final DataFlavor SERIALIZED_DATA_FLAVOR = new DataFlavor(String.class, "application/x-java-serialized-object; Plain text");
        private final TableModel model;

        public TableTransferable(TableModel model) {
            this.model = model;
        }

        @Override
        public DataFlavor[] getTransferDataFlavors() {
            return new DataFlavor[]{TABLE_DATA_FLAVOR, HTML_DATA_FLAVOR, CSV_DATA_FLAVOR, SERIALIZED_DATA_FLAVOR};
        }

        @Override
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            System.out.println("isSupported " + flavor);
            boolean supported = false;
            for (DataFlavor mine : getTransferDataFlavors()) {
                if (mine.equals(flavor)) {
                    supported = true;
                    break;
                }
            }
            return supported;
        }

        @Override
        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
            System.out.println("get " + flavor);
            Object data = null;
            if (TABLE_DATA_FLAVOR.equals(flavor)) {
                data = model;
            } else if (HTML_DATA_FLAVOR.equals(flavor)) {
                data = new ByteArrayInputStream(formatAsHTML().getBytes());
            } else if (SERIALIZED_DATA_FLAVOR.equals(flavor)) {
                data = formatAsHTML();
            } else if (CSV_DATA_FLAVOR.equals(flavor)) {
                data = new ByteArrayInputStream("CSV".getBytes());
            } else {
                throw new UnsupportedFlavorException(flavor);
            }
            return data;
        }

        public String formatAsHTML() {
            StringBuilder sb = new StringBuilder(128);
            sb.append("<html><body>");
            sb.append("<table>");
            sb.append("<tr>");
            for (int index = 0; index < model.getColumnCount(); index++) {
                sb.append("<th>").append(model.getColumnName(index)).append("</th>");
            }
            sb.append("</tr>");
            for (int rowIndex = 0; rowIndex < model.getRowCount(); rowIndex++) {
                sb.append("<tr>");
                for (int colIndex = 0; colIndex < model.getColumnCount(); colIndex++) {
                    Object o = model.getValueAt(rowIndex, colIndex);
                    // You will want to format the value...
                    String value = o == null ? "" : o.toString();
                    sb.append("<td>").append(value).append("</td>");
                }
                sb.append("</tr>");
            }
            sb.append("</table>");

            return sb.toString();
        }
        /*
        @Override
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }*/
    }
        
    private TableModel createTable(List lotteryList) {
        String[] columnNames = {"Αριθμός Δώρου", "Λαχνός"};
        TableModel movieTableModel = new LotteryTableModel(lotteryList,columnNames);
        return movieTableModel;
    }
    
    private int textToInt(JTextField textField) {
        int temp;
        temp = Integer.parseInt(textField.getText());
        return temp;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField gifts;
    private javax.swing.JButton instertBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lotteryFromNoText;
    private javax.swing.JTextField lotteryToNoText;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton runLottery;
    // End of variables declaration//GEN-END:variables
}
